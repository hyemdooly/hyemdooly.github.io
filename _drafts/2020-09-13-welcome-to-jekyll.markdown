---
layout: post
title:  "소프트웨어 소개"
date:   2020-10-18
categories: 소프트웨어공학
---
## 소프트웨어

### 소프트웨어가 갖는 특징

`프레드 브룩스`가 정의한 소프트웨어가 갖는 특징

- `복잡성` : 자동화하려는 대상이 복잡할 뿐 아니라 수많은 내부 요소들로부터 이루어져 상호작용이 많고 복잡함
- `순응성` : 요구나 환경, 데이터의 변화에 따라 적절히 변형됨
- `변경성` : 문자로 구성되어 있기 때문에 쉽게 변경 가능, 개발 과정에 자주 변경됨
- `비가시성` : 구조가 코드 안에 숨어 있어 쉽게 드러나지 않음

### 소프트웨어의 종류

|   소프트웨어 분류   |                             특징                             | 사용되는<br /> 카피의 수 | 요구되는<br />하드웨어 성능 | 개발 인력 |
| :-----------------: | :----------------------------------------------------------: | :----------------------: | --------------------------- | :-------: |
|  주문형 소프트웨어  |    - 특정 고객 또는 기업의 요구를 만족시키기 위하여 제작     |           적음           | 낮음                        |   많음    |
|  패키지 소프트웨어  | - 패키지화하여 상업적으로 판매<br />- 워드프로세서, 스프레드시트, 유통업체의 POS(Point of Sales) 시스템, 재정 분석, 주문 관리, 회계 관리 시스템 |           중간           | 높음                        |   중간    |
| 임베디드 소프트웨어 |              - 다른 시스템에 내장된 소프트웨어               |           많음           | 중간                        |   적음    |

### 시스템

`시스템` : 필요한 기능을 실현시키기 위하여 관련 요소를 어떤 법칙에 따라 조합한 집합체

#### 시스템의 4가지 성질

- `서브시스템` : 시스템은 밀접히 관련된 서브시스템들로 구성, ex) 교통 시스템 : 신호기, 신호체계, 도로망 등 여러 가지 요소 (원활한 교통 소통과 제어를 위해 밀접한 연관)
- `기능적 분할` : 시스템은 규모가 작은 부속 서브시스템들로 나눌 수 있음
- `시스템 경계` : 시스템은 어떤 것이건 시스템과 주변 환경을 구분할 수 있는 경계가 있음. (입력과 출력이 만나는 곳)
- `자동화 경계` : 시스템이 자동화된 부분과 수동 작업 부분을 나누는 경계

## 소프트웨어 개발 작업

### 기본 활동

- `명세화 (specification)` : 생산하기 전에 고객과 계약자 or 공급 업체 간에 제품 작동 방식, 성능 요구 등 합의, 소프트웨어가 작동해야할 기능, 성능 + 제품의 원가, 위험, 일정 등 제약 사항 포함
- `구현 (coding)` : 시스템의 명세를 주어진 여건에 맞게 설계하여 프로그래밍 언어로 변환
- `검증 (verification)` : 구현된 소프트웨어가 고객의 의도와 일치하는지 확인
- `유지보수 (maintenance)` : 개발된 이후 사용 단계의 결함 수정, 고객이나 시장의 요구 변화에 맞게 소프트웨어 수정

### 개발 작업의 특징

#### 소프트웨어 개발의 어려움

- `명세화의 어려움` : 고객의 의도를 처음부터 정확히 설명하고 이해하기 쉽지 않음, 보고 사용해보기 전까지 필요한 것을 정의하기 어려움
- `재사용의 어려움` : 미리 재사용할 부품을 만들기 어려움, 다루는 문제가 늘 똑같지 않아 전에 만들어 놓은 컴포넌트를 다른 소프트웨어에 적용할 수 없음
- `예측의 어려움` : 여러가지 외부 요소(업무 절차, 법규, 하드웨어, 데이터 형식, 성능 조건 등)의 영향을 받아 사전 견적이나. 프로젝트의 규모를 예측하기 쉽지 않음
- `유지보수의 어려움` : 다른 사람이 개발한 소프트웨어를 쉽게 이해하기 어렵고, 이해하여 고치더라도 관련되는 다른 부분에 오작동을 일으킬 수 있음
- `고품질의 어려움` : 한 줄의 코드라도 스스로 동작하는 것은 없음, 상호 관련된 무수히 많은 요소들이 존재함. 따라서 한 줄의 코드를 수정하더라도 테스트할 내용이 많아지며 모든 실행 조합을 다 테스트하는 것은 불가능함

#### 소프트웨어의 위기

소프트웨어 공학 초기에 사용되던 용어

소프트웨어 수요가 급격히 증가하고 그 복잡성이 증가함에 따라 기존 방법이 충분하지 않아 발생한 문제를 의미함

원인은 다음과 같음

- `요구 증가`
- `복잡도 증가`
- `난이도 증가`
- `같은 인력`
- `같은 방법`
- `같은 도구`

더 구체적으로는,

- 소프트웨어를 소유하고 유지하는 비용이 개발하는 것만큼 높음
- 프로젝트는 항상 초과 근무
- 비효율적인 소프트웨어
- 낮은 품질
- 요구 사항을 충족하지 못함
- 프로젝트 일정이 50% 초과
- 계획된 일정에 소프트웨어가 배포되지 않음

### 소프트웨어 공학의 접근법

즉흥적인 소프트웨어 개발은 코딩과 수정 (code-and-fix) 작업이 반복되는데 많은 문제에 노출될 수 있음

- `개발 지연과 예산 초과`
- `낮은 품질`
- `유지보수 곤란`
- `재작업`

#### 소프트웨어 공학의 정의

`소프트웨어 공학` : 소프트웨어를 개발하기 위하여 체계적으로 접근하고 원리를 적용하는 것

방법을 다른 사람이 사용하더라도 유사한 소프트웨어를 만들 수 있음

주먹구구식이 아닌 엔지니어링 기법을 도입하려는데 목적이 있음

#### 소프트웨어 공학의 목표

소프트웨어 개발에 공학적 접근 방법을 적용하는 궁극적 목표

- `복잡도 낮춤`
- `비용 최소화`
- `개발 기간 단축`
- `대규모 프로젝트 관리`
- `고품질 소프트웨어`
- `효율성`

결국 소프트웨어 공학은 여러가지 *원리와 방법*을 적용하여

- 품질 좋은 소프트웨어를
- 최소의 비용으로
- 계획된 일정에 맞추어 개발하는 것

### 소프트웨어 공학의 주제

소프트웨어 공학의 세 가지 작업

- `단계적 프로세스` : 요구 파악, 명세화, 설계, 구현, 테스팅
- `품질 보증` :  Software Quality Assurance, 개발 작업이 적절히 수행되었는지 확인, 산출물이 요구와 일치하는지 품질 수준에 맞는지 검사
- `프로젝트 관리` : 개발과 품질 보증 작업을 관리/감독, 노력 예측, 프로젝트 계획, 일정, 리스크 관리, 행정 등

#### 단계적 프로세스

1. `계획`
2. `요구 분석`
3. `설계`
4. `코딩`
5. `테스팅`
6. `유지보수`

|  단계  |                초점                 |                       주요 작업과 기술                       |          결과물          |
| :----: | :---------------------------------: | :----------------------------------------------------------: | :----------------------: |
|  분석  | 시스템을 위하여 무엇을 만들 것인가? | - 분석 전략 수립<br />- 요구 결정<br />- 유스케이스 분석<br />- 구조적 모델링<br />- 동적 모델링 |     요구 분석 명세서     |
|  설계  |   시스템을 어떻게 구축할 것인가?    | - 설계 전략 수립<br />- 아키텍처 설계<br />- 인터페이스 설계<br />- 프로그램 설계<br />- 데이터베이스 파일 설계 |       설계 명세서        |
|  구현  |      시스템의 코딩과 단위 시험      | - 프로그래밍<br />- 단위 테스팅<br />- 시스템 안정화 및 유지보수 | 새 시스템, 유지보수 계획 |
| 테스팅 |   시스템이 요구에 맞게 실행되나?    | - 통합 테스팅<br />- 시스템 테스팅<br />- 인수 테스팅<br />- 시스템의 설치<br />- 프로젝트 관리 계획 |    테스팅 결과 보고서    |

### 품질 보증

#### 품질 보증 작업

- `검토 (verification)` : 각 단계의 작업이 제시된 절차와 방법에 맞게 진행되었는지 체크
- `확인 (validation)` : 개발 완료된 결과물이 품질 수준에 맞게 생산되었는지 검사
- `테스팅` : 구현된 소프트웨어를 실행하여 예상된 결과를 보이는지 확인하는 작업

#### 바람직한 소프트웨어가 가져야 할 특징

- `유지보수성` : 변화하는 고객의 요구에 맞게 소프트웨어가 발전함
- `신뢰성` : 보안과 안전을 포함한 다양한 성질, 시스템이 장애를 일으켰을 때 물리적, 경제적 손실을 발생시키지 않는 특징
- `효율성` : 메모리, 프로세스 머신 사이클과 같은 시스템 자원을 낭비하지 않는 성질
- `유용성` : 사용자가 큰 노력을 들이지 않고 쉽게 사용할 수 있는 특성, 적절한 사용자 인터페이스와 문서를 제공하여 만족시킬 수 있음

### 프로젝트 관리

